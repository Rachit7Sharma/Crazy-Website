const crypto = require('crypto');

class Meowcoin {
    constructor(network = 'mainnet') {
        this.network = network;
    }

    
    static generatePrivateKey() {
        return crypto.randomBytes(32).toString('hex');
    }

    static getPublicKey(privateKey) {
        const key = crypto.createPrivateKey({ key: Buffer.from(privateKey, 'hex'), format: 'der', type: 'pkcs8' });
        return crypto.createPublicKey(key).export({ format: 'pem', type: 'spki' }).toString();
    }

    static getAddress(publicKey) {
        return crypto.createHash('sha256').update(publicKey).digest('hex');
    }

    static createTransaction(senderAddress, recipientAddress, amount, privateKey) {
        const transaction = {
            from: senderAddress,
            to: recipientAddress,
            amount: amount,
            timestamp: Date.now()
        };
        transaction.signature = this.signTransaction(privateKey, JSON.stringify(transaction));
        return transaction;
    }

    static signTransaction(privateKey, data) {
        const sign = crypto.createSign('RSA-SHA256');
        sign.update(data);
        return sign.sign(privateKey, 'hex');
    }

    static verifyTransactionSignature(publicKey, signature, data) {
        const verify = crypto.createVerify('RSA-SHA256');
        verify.update(data);
        return verify.verify(publicKey, signature, 'hex');
    }

    static sendTransaction(transaction) {
        console.log('Transaction sent to the network:', transaction);
    }
}

module.exports = Meowcoin;
